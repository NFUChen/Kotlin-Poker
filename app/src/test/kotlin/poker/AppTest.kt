/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package poker

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Assertions.assertThrows

class CardTest {
    @Test
    fun testHasSuit() {
        val card = Card("Queen", "Hearts")
        assertEquals(card.rank, "Queen")
    }

    @Test
    fun testHasRank() {
        val card = Card("Queen", "Hearts")

        assertEquals(card.suit, "Hearts")
    }

    @Test
    fun testHasToString() {
        val card = Card("Queen", "Hearts")

        assertEquals("Card('Queen', 'Hearts')", card.toString(), "Getting ${card.toString()}")
    }

    @Test
    fun testHasFourPossibleRankOptions() {
        val expected = arrayListOf("Hearts", "Clubs", "Spades", "Diamonds")

        assertTrue(
                Card.SUITS.equals(expected),
                "Getting ${Card.SUITS.toString()}, It should be ${expected}"
        )
    }
    @Test
    fun testHasThirteenPossibleSuitOptions() {
        val expected =
                arrayListOf(
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "Jack",
                        "Queen",
                        "King",
                        "Ace"
                )

        assertTrue(
                Card.RANKS.equals(expected),
                "Getting ${Card.RANKS.toString()}, It should be ${expected}"
        )
    }
    @Test
    fun testInvalidRankDidRaise() {
        assertThrows(
                IllegalArgumentException::class.java,
                { Card("test", "Spades") },
                "Invalid rank should be throw"
        )
    }

    @Test
    fun testInvalidSuitDidRaise() {
        assertThrows(
                IllegalArgumentException::class.java,
                { Card("2", "test") },
                "Invalid suit should be throw"
        )
    }
    @Test
    fun testDeckDidHave52Cards() {
        val cards = Card.Create52Cards()
        println(cards)
        assertEquals(52, cards.size, "Should have 52 cards, getting ${cards.size}")
    }
}

class DeckTest {

    @Test
    fun testStoresNoCardsAtStart() {
        val deck = Deck()
        assertEquals(0, deck.cards.size, "New deck should contains no cards at all")
    }
    @Test
    fun testAddCardsToDeckCollection() {
        val deck = Deck()
        val cards = arrayListOf(Card("Queen", "Hearts"))
        deck.addCards(cards)
        assertEquals(arrayListOf(Card("Queen", "Hearts")), deck.cards)
    }
}
